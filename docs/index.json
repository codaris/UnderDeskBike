{
  "api/Codaris.Common.ExceptionEventArgs.html": {
    "href": "api/Codaris.Common.ExceptionEventArgs.html",
    "title": "Class ExceptionEventArgs",
    "keywords": "Class ExceptionEventArgs Exception raised event args. Inheritance Object ExceptionEventArgs Namespace : Codaris.Common Assembly : Codaris.Common.dll Syntax public class ExceptionEventArgs : EventArgs Constructors ExceptionEventArgs(Exception) Initializes a new instance of the ExceptionEventArgs class. public ExceptionEventArgs(Exception exception) Parameters Type Name Description Exception exception The exception that caused the disconnection. Properties Exception Gets the exception that caused the disconnection, if one exists. public Exception Exception { get; } Property Type Exception IsHandled Gets or sets a value indicating whether this instance is handled. public bool IsHandled { get; set; } Property Type Boolean"
  },
  "api/Codaris.Common.html": {
    "href": "api/Codaris.Common.html",
    "title": "Namespace Codaris.Common",
    "keywords": "Namespace Codaris.Common Classes ExceptionEventArgs Exception raised event args. NotifyObject Abstract base class for classes that implement INotifyPropertyChanged. ScheduledTimer A timer that fires at a particular time of day. TaskExtensions Extensions for supporting async tasks. Util Utility methods."
  },
  "api/Codaris.Common.NotifyObject.html": {
    "href": "api/Codaris.Common.NotifyObject.html",
    "title": "Class NotifyObject",
    "keywords": "Class NotifyObject Abstract base class for classes that implement INotifyPropertyChanged. Inheritance Object NotifyObject Bike Namespace : Codaris.Common Assembly : Codaris.Common.dll Syntax public abstract class NotifyObject : INotifyPropertyChanged Methods OnPropertyChanged(String) Called when the property changed. protected void OnPropertyChanged(string name = null) Parameters Type Name Description String name The property name. SetProperty<T>(ref T, T, Action<T>, String) Sets the property value and raises the changed event. protected bool SetProperty<T>(ref T field, T value, Action<T> onChanged = null, string name = null) Parameters Type Name Description T field The field. T value The value. Action <T> onChanged The action to execute if the value changes. String name The name of the property. Returns Type Description Boolean True if property was changed. Type Parameters Name Description T The type of the property. Events PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/Codaris.Common.ScheduledTimer.html": {
    "href": "api/Codaris.Common.ScheduledTimer.html",
    "title": "Class ScheduledTimer",
    "keywords": "Class ScheduledTimer A timer that fires at a particular time of day. Inheritance Object ScheduledTimer Namespace : Codaris.Common Assembly : Codaris.Common.dll Syntax public class ScheduledTimer : IDisposable Constructors ScheduledTimer(Int32, Int32, Int32) Initializes a new instance of the ScheduledTimer class. This timer will trigger at the specified time of day. public ScheduledTimer(int hour, int minute, int second) Parameters Type Name Description Int32 hour The hour. Int32 minute The minute. Int32 second The second. Properties AutoReset Gets or sets a value indicating whether this instance should raise the Elapsed event only once (false) or repeatedly (true). public bool AutoReset { get; set; } Property Type Boolean Enabled Gets or sets a value indicating whether this ScheduledTimer should raise the Elapsed event. public bool Enabled { get; set; } Property Type Boolean Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Start() Starts raising theElapsed event by setting Enabled to true. public void Start() Stop() Stops raising the SElapsed event by setting Enabled to false. public void Stop() Events Elapsed Occurs when timer has elapsed. public event ElapsedEventHandler Elapsed Event Type ElapsedEventHandler"
  },
  "api/Codaris.Common.TaskExtensions.html": {
    "href": "api/Codaris.Common.TaskExtensions.html",
    "title": "Class TaskExtensions",
    "keywords": "Class TaskExtensions Extensions for supporting async tasks. Inheritance Object TaskExtensions Namespace : Codaris.Common Assembly : Codaris.Common.dll Syntax public static class TaskExtensions : object Methods FireAndForget(Task, Action<Exception>) Fires and forgets the task. Requires an action to handle any task exceptions. public static void FireAndForget(this Task task, Action<Exception> errorHandler) Parameters Type Name Description Task task The task. Action < Exception > errorHandler The error handler. FireAndForget(Task, Func<Exception, Boolean>) Fires and forgets the task. Requires an action to handle any task exceptions. public static void FireAndForget(this Task task, Func<Exception, bool> errorHandler) Parameters Type Name Description Task task The task. Func < Exception , Boolean > errorHandler The error handler."
  },
  "api/Codaris.Common.Util.html": {
    "href": "api/Codaris.Common.Util.html",
    "title": "Class Util",
    "keywords": "Class Util Utility methods. Inheritance Object Util Namespace : Codaris.Common Assembly : Codaris.Common.dll Syntax public static class Util : object Methods ByteArrayEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>) Byte array equal comparison. public static bool ByteArrayEqual(ReadOnlySpan<byte> a1, ReadOnlySpan<byte> a2) Parameters Type Name Description ReadOnlySpan < Byte > a1 The a1. ReadOnlySpan < Byte > a2 The a2. Returns Type Description Boolean Returns true if the specified arrays are equal."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation",
    "keywords": "API Documentation Namespaces UnderDeskBike This namespace contains the main Bike interface class and related classes. Class Description Bike The main class for recording workouts from the bike. BikeDataException Raised when an error occurs receiving data from the bike. BikeWorkoutData A sample of workout data from the bike. BikeWorkoutEventArgs Complex tasks which require Vector's internal logic to complete UnderDeskBike.Models This namespace contains the classes for interfacing with the SQLite database containing the workout data and samples. Class Description Context The database context for the bike data. Workout Summary data for a workout. WorkoutEntry A single sample from the bike. Codaris.Common A home-grown library of helper classes."
  },
  "api/UnderDeskBike.Bike.html": {
    "href": "api/UnderDeskBike.Bike.html",
    "title": "Class Bike",
    "keywords": "Class Bike The primary class for the under desk bike. Inheritance Object NotifyObject Bike Implements IDisposable Inherited Members NotifyObject.PropertyChanged Codaris.Common.NotifyObject.SetProperty<T>(T, T, Action<>, System.String) NotifyObject.OnPropertyChanged(String) Namespace : UnderDeskBike Assembly : UnderDeskBike.Device.dll Syntax public class Bike : NotifyObject, IDisposable Constructors Bike(TextWriter) Initializes a new instance of the Bike class. public Bike(TextWriter logger = null) Parameters Type Name Description TextWriter logger The logger. Properties IsConnected Gets a value indicating whether this instance is connected. public bool IsConnected { get; } Property Type Boolean IsWorkoutRunning Gets a value indicating whether this instance is workout active. public bool IsWorkoutRunning { get; } Property Type Boolean WorkoutData Gets the distance in miles. public BikeWorkoutData WorkoutData { get; } Property Type BikeWorkoutData Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. StartListening() Start listening for a connection. public Task StartListening() Returns Type Description Task A representing the asynchronous operation. StartWorkout(Int32) Starts the workout. public Task<bool> StartWorkout(int interval = 250) Parameters Type Name Description Int32 interval The interval. Returns Type Description Task < Boolean > A representing the asynchronous operation. StopListening() Stops the listening. public Task StopListening() Returns Type Description Task A representing the asynchronous operation. StopWorkout() Stops the workout. public Task StopWorkout() Returns Type Description Task A representing the asynchronous operation. WaitForConnection() Waits for connection. public Task WaitForConnection() Returns Type Description Task A representing the asynchronous operation. WaitForWorkout() Waits for workout end. public Task WaitForWorkout() Returns Type Description Task A representing the asynchronous operation. Events Connected Occurs when connected. public event EventHandler Connected Event Type EventHandler Disconnected Occurs when disconnected. public event EventHandler Disconnected Event Type EventHandler Error Occurs when a background error is triggered public event EventHandler<ExceptionEventArgs> Error Event Type EventHandler < ExceptionEventArgs > WorkoutEnded Occurs when ending workout. public event EventHandler WorkoutEnded Event Type EventHandler WorkoutStarted Occurs when start workout. public event EventHandler WorkoutStarted Event Type EventHandler WorkoutUpdate Occurs when workout update occurs. public event EventHandler<BikeWorkoutEventArgs> WorkoutUpdate Event Type EventHandler < BikeWorkoutEventArgs > Implements IDisposable See Also NotifyObject"
  },
  "api/UnderDeskBike.BikeDataException.html": {
    "href": "api/UnderDeskBike.BikeDataException.html",
    "title": "Class BikeDataException",
    "keywords": "Class BikeDataException Raised when an error occurs receiving data from the bike. Inheritance Object BikeDataException Namespace : UnderDeskBike Assembly : UnderDeskBike.Device.dll Syntax public class BikeDataException : Exception Constructors BikeDataException(SerializationInfo, StreamingContext) Initializes a new instance of the BikeDataException class. protected BikeDataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. BikeDataException(String) Initializes a new instance of the BikeDataException class. public BikeDataException(string message) Parameters Type Name Description String message The message that describes the error. BikeDataException(String, Exception) Initializes a new instance of the BikeDataException class. public BikeDataException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/UnderDeskBike.BikeWorkoutData.html": {
    "href": "api/UnderDeskBike.BikeWorkoutData.html",
    "title": "Struct BikeWorkoutData",
    "keywords": "Struct BikeWorkoutData This a sample of workout data from the bike. Implements IEquatable < BikeWorkoutData > Namespace : UnderDeskBike Assembly : UnderDeskBike.Device.dll Syntax public struct BikeWorkoutData : IEquatable<BikeWorkoutData> Constructors BikeWorkoutData(Byte[]) Initializes a new instance of the BikeWorkoutData struct. public BikeWorkoutData(byte[] data) Parameters Type Name Description Byte [] data The data. Properties DistanceKms Gets the distance in KMs. public decimal DistanceKms { get; } Property Type Decimal DistanceMiles Gets the distance in miles. public decimal DistanceMiles { get; } Property Type Decimal RotationsPerMinute Gets the rotations per minute. public int RotationsPerMinute { get; } Property Type Int32 Second Gets the second of the record. public int Second { get; } Property Type Int32 SpeedKph Gets the speed in KPH. public decimal SpeedKph { get; } Property Type Decimal SpeedMph Gets the speed in MPH. public decimal SpeedMph { get; } Property Type Decimal SpeedValue Gets the speed value (0 to 9). public int SpeedValue { get; } Property Type Int32 Timestamp Gets the timestamp. public DateTime Timestamp { get; } Property Type DateTime WorkoutTime Gets the workout time. public TimeSpan WorkoutTime { get; } Property Type TimeSpan Methods Equals(Object) Determines whether the specified , is equal to this instance. public override bool Equals(object obj) Parameters Type Name Description Object obj The to compare with this instance. Returns Type Description Boolean true if the specified is equal to this instance; otherwise, false . Equals(BikeWorkoutData) Indicates whether the current object is equal to another object of the same type. public bool Equals(BikeWorkoutData other) Parameters Type Name Description BikeWorkoutData other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Operators Equality(BikeWorkoutData, BikeWorkoutData) Implements the operator ==. public static bool operator ==(BikeWorkoutData lhs, BikeWorkoutData rhs) Parameters Type Name Description BikeWorkoutData lhs The LHS. BikeWorkoutData rhs The RHS. Returns Type Description Boolean The result of the operator. Inequality(BikeWorkoutData, BikeWorkoutData) Implements the operator !=. public static bool operator !=(BikeWorkoutData lhs, BikeWorkoutData rhs) Parameters Type Name Description BikeWorkoutData lhs The LHS. BikeWorkoutData rhs The RHS. Returns Type Description Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/UnderDeskBike.BikeWorkoutEventArgs.html": {
    "href": "api/UnderDeskBike.BikeWorkoutEventArgs.html",
    "title": "Class BikeWorkoutEventArgs",
    "keywords": "Class BikeWorkoutEventArgs The event data for the workout sample. Inheritance Object BikeWorkoutEventArgs Namespace : UnderDeskBike Assembly : UnderDeskBike.Device.dll Syntax public class BikeWorkoutEventArgs : EventArgs Constructors BikeWorkoutEventArgs(BikeWorkoutData) Initializes a new instance of the BikeWorkoutEventArgs class. public BikeWorkoutEventArgs(BikeWorkoutData data) Parameters Type Name Description BikeWorkoutData data The data. Properties Data Gets the workout data. public BikeWorkoutData Data { get; } Property Type BikeWorkoutData"
  },
  "api/UnderDeskBike.html": {
    "href": "api/UnderDeskBike.html",
    "title": "Namespace UnderDeskBike",
    "keywords": "Namespace UnderDeskBike Classes Bike The primary class for the under desk bike. BikeDataException Raised when an error occurs receiving data from the bike. BikeWorkoutEventArgs The event data for the workout sample. Structs BikeWorkoutData This a sample of workout data from the bike."
  },
  "api/UnderDeskBike.Models.Context.html": {
    "href": "api/UnderDeskBike.Models.Context.html",
    "title": "Class Context",
    "keywords": "Class Context The database context for the bike data. Inheritance Object Context Namespace : UnderDeskBike.Models Assembly : UnderDeskBike.Data.dll Syntax public class Context : DbContext Properties WorkoutEntries Gets or sets the workout entries. public DbSet<WorkoutEntry> WorkoutEntries { get; set; } Property Type DbSet < WorkoutEntry > Workouts Gets or sets the workouts. public DbSet<Workout> Workouts { get; set; } Property Type DbSet < Workout > Methods OnConfiguring(DbContextOptionsBuilder) This method configures the database (and other options) to be used for this context. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder used to create or modify options for this context. SaveChanges() Saves all changes made in this context to the database. public override int SaveChanges() Returns Type Description Int32 The number of state entries written to the database."
  },
  "api/UnderDeskBike.Models.html": {
    "href": "api/UnderDeskBike.Models.html",
    "title": "Namespace UnderDeskBike.Models",
    "keywords": "Namespace UnderDeskBike.Models Classes Context The database context for the bike data. Workout The workout data entity. WorkoutEntry The workout sample entry."
  },
  "api/UnderDeskBike.Models.Workout.html": {
    "href": "api/UnderDeskBike.Models.Workout.html",
    "title": "Class Workout",
    "keywords": "Class Workout The workout data entity. Inheritance Object Workout Namespace : UnderDeskBike.Models Assembly : UnderDeskBike.Data.dll Syntax public class Workout : object Properties AverageRotationsPerMinute Gets or sets the average rotations per minute. public double AverageRotationsPerMinute { get; set; } Property Type Double AverageSpeedKph Gets or sets the average speed KPH. public double AverageSpeedKph { get; set; } Property Type Double DistanceKms Gets or sets the distance KMS. public double DistanceKms { get; set; } Property Type Double Duration Gets or sets the duration. public int Duration { get; set; } Property Type Int32 EndDateTime Gets or sets the end date time. public DateTime EndDateTime { get; set; } Property Type DateTime Entries Gets the entries. public virtual List<WorkoutEntry> Entries { get; } Property Type List < WorkoutEntry > StartDateTime Gets or sets the start date time. public DateTime StartDateTime { get; set; } Property Type DateTime WorkoutId Gets or sets the workout identifier. public int WorkoutId { get; set; } Property Type Int32 Methods AveragesFromEntries() Calculates the averages from the entries. public void AveragesFromEntries()"
  },
  "api/UnderDeskBike.Models.WorkoutEntry.html": {
    "href": "api/UnderDeskBike.Models.WorkoutEntry.html",
    "title": "Class WorkoutEntry",
    "keywords": "Class WorkoutEntry The workout sample entry. Inheritance Object WorkoutEntry Namespace : UnderDeskBike.Models Assembly : UnderDeskBike.Data.dll Syntax public class WorkoutEntry : object Properties DistanceKms Gets or sets the distance in KMs. public double DistanceKms { get; set; } Property Type Double Duration Gets or sets the workout time. public int Duration { get; set; } Property Type Int32 RotationsPerMinute Gets or sets the rotations per minute. public int RotationsPerMinute { get; set; } Property Type Int32 Second Gets or sets the second. This is a value from 0-59 from the bike. public int Second { get; set; } Property Type Int32 SpeedKph Gets or sets the speed in KPH. public double SpeedKph { get; set; } Property Type Double SpeedValue Gets or sets the speed value (0 to 9). public int SpeedValue { get; set; } Property Type Int32 Timestamp Gets or sets the timestamp. public DateTime Timestamp { get; set; } Property Type DateTime Workout Gets or sets the workout. public virtual Workout Workout { get; set; } Property Type Workout WorkoutEntryId Gets or sets the workout entry identifier. public int WorkoutEntryId { get; set; } Property Type Int32 WorkoutId Gets or sets the workout identifier. public int WorkoutId { get; set; } Property Type Int32"
  },
  "index.html": {
    "href": "index.html",
    "title": "Hacking a $200 Under Desk Exercise Bike",
    "keywords": "Hacking a $200 Under Desk Exercise Bike Due to COVID, I haven't been getting my usual amount of exercise this year. To help with that, I decided to take a chance and order an under desk exercise bike to get some more cardio. The bike I bought is decent: good tension, doesn't move around, is very quiet, and has Bluetooth connectivity for tracking workouts. If you're thinking of getting one of these under desk bikes I wouldn't automatically recommend it. If your desk is normal sized you will bump your knees on it. But my desk is designed to be used with a keyboard tray and I hate keyboard trays. So instead my keyboard is on the top of the desk, my chair is raised up, and I use a footrest. All this means that my desk is actually the perfect height for peddling. Bluetooth connectivity is important to me; being able to see and record speed and distance is a big motivator. For connectivity there is unsurprisingly a phone app. It's not a good app. It feels unpolished and gets mediocre reviews. And, of course, it also requires a signup and tries to upsell you on a subscription for classes. I can ignore all that. But, sitting at my workstation, I don't want to take out my phone and go through 5 steps every time I want to workout. Nor do I want to keep my phone on and propped up on my desk for long periods of time. Lastly, I very much did not want all my workout data locked away in this app. The solution was obvious -- build my own desktop app! The Project I was inspired by this article: Unbricking a $2,000 Bike With a $10 Raspberry Pi . I figured my under desk bike probably worked in a similar way and if I could connect to it from my desktop I could write my own application. Objectives Display, in real time, the workout data in a small window on the desktop. Record the workout data to a SQLite database for analysis, goal setting, and motivation. If possible, have the app start and stop automatically whenever I start peddling. Complications My desktop didn't have Bluetooth Zero experience working with Bluetooth LE I solved the first complication by getting a USB dongle off of Amazon. The second complication would be solved as I went. Step 1 - Research The first task was to google for as much information as possible. This lead to a piece of software called nRF Connect . This Android software shows information about all your Bluetooth devices, allows you connect to them, show you all the available profiles, and log data. With this I learned the bike uses a chip called Nordic UART . This is basically a serial connection at one end and Bluetooth on the other. This was great news - it should mean that the bike is just streaming bytes. However, connecting to it with nRF connect didn't immediately provide me with any data from the bike. It was connected, I was subscribed to changes, but no data was being sent. This would require more work. So the next step was to run the app and log all the Bluetooth traffic to see what was happening. More googling sent me to this article that describes enabling the Bluetooth log on my phone and downloading it for analysis. I enabled screen recording on my phone, enabled Bluetooth logging, did a couple of runs on the bike, and then downloaded the logs. Using Wireshark and comparing it with my recorded video I got see how the app communicated with the bike. The app would send a command packet and the bike would respond with one or more packets. The app would send a single command continuously when the workout started and the bike would respond with packets of similar looking data. Step 2 - Connecting to the Bike Using the logs and Wireshark, I determined that the app sends 6 different commands. So the next step was to create a simple console application that could connect to bike, send the commands, and receive the results. I needed to see if I could, at minimum, replicate the activity of the app using my own software on the desktop. The platform of choice for this adventure was .NET 5.0 on Windows. I needed access to the Windows Runtime for the Bluetooth API in Windows. I discovered that this is extremely easy to do . Step 3 - Interpreting the Data The first command the app sends I will call the Connect command. This command must be sent before any other commands. As soon as you send this command, you must send commands at a minimum of one second intervals or the bike will close the connection. Start Command: f9 d0 00 c9 Response: f9 e0 00 d9 The second command the app sends I call the Hold command. Since you must send commands at regular intervals once you've connected, sending this command appears to just keep the connection open. The bike responds with 2 packets of identical data every time this command is sent. Hold Command: f9 d1 05 02 00 00 00 00 d1 Response #1: f9 e1 10 07 00 00 00 00 00 00 02 00 03 37 00 00 2a Response #2: f9 e2 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 eb The 3rd and 4th commands I just call Info1 and Info2 . These commands are sent by the app once per connection and they always return the same information. This could be model or calibration information. Info1 Command: f9 d3 0d 01 00 00 2c 00 00 3c 00 a0 00 00 00 00 e2 00 00 00 Response #1: f9 e3 01 00 dd Response #2: f9 e3 0c 00 00 00 00 00 00 00 00 00 00 00 00 e8 Info2 Command: f9 d4 0f 02 00 00 00 00 00 00 00 00 00 00 00 00 1f 0f 0c 00 Response: f9 e4 02 00 00 df At this point we can see the pattern emerge. Every command and every response starts with the byte F9 . The next byte contains the command or response type; the high nibble is D for commands and E for responses. The next byte is the length of the packet not including this header. The next byte after that appears to be some kind of checksum. The most interesting commands come next. I call these the Start Workout and Continue Workout commands. The first command is sent when you start the workout and then app continuously sends the second command to sample data from the bike. Start Cmd: f9 d5 0d 01 00 00 00 00 00 00 00 00 00 00 00 00 dc 00 00 00 Response #1: f9 e5 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ef Response #2: f9 e6 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ef Response #3: f9 e7 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 Continue Cmd: f9 d5 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 db 00 00 00 Response #1: f9 e5 10 00 09 00 03 00 07 00 00 00 99 00 00 53 00 00 01 ee Response #2: f9 e6 10 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 2f 24 Response #3: f9 e7 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 At this point I could start assembling and interpreting the data. The first thing I did was combine all the workout result packets together and lop off the header. Then I biked for 10 minutes collecting the data. 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EF 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EF 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 F1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EF 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 03 00 00 00 01 00 00 00 BC 00 00 66 00 00 01 15 00 00 00 00 07 00 00 00 00 00 00 00 00 00 19 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 03 00 01 00 01 00 00 00 BB 00 00 65 00 00 01 14 00 00 00 00 07 00 00 00 00 00 00 00 00 00 19 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 04 00 01 00 02 00 00 00 BE 00 00 67 00 00 01 1B 00 00 00 00 07 00 00 00 00 00 00 00 00 00 25 1B 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 05 00 01 00 03 00 00 00 C1 00 00 69 00 00 01 22 00 00 00 00 07 00 00 00 00 00 00 00 00 00 2D 23 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 06 00 02 00 04 00 00 00 C3 00 00 6A 00 00 01 28 00 00 00 00 07 00 00 00 00 00 00 00 00 00 32 28 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 07 00 02 00 06 00 00 00 C1 00 00 69 00 00 01 28 00 00 00 00 07 00 00 00 00 00 00 00 00 00 36 2C 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 07 00 03 00 06 00 00 00 C1 00 00 69 00 00 01 29 00 00 00 00 07 00 00 00 00 00 00 00 00 00 36 2C 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 08 00 03 00 07 00 00 00 BE 00 00 67 00 00 01 26 00 00 00 00 07 00 00 00 00 00 00 00 00 00 39 2F 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 09 00 03 00 08 00 00 00 BA 00 00 65 00 00 01 22 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3B 31 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0A 00 04 00 09 00 00 00 B0 00 00 5F 00 00 01 15 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3C 32 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0B 00 04 00 0A 00 00 00 B5 00 00 63 00 00 01 20 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3D 33 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0B 00 05 00 0A 00 00 00 B8 00 00 64 00 00 01 25 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3D 33 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0C 00 05 00 0C 00 00 00 BB 00 00 66 00 00 01 2D 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3E 34 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0D 00 06 00 0D 00 00 00 BF 00 00 68 00 00 01 36 00 00 00 00 07 00 00 00 00 00 00 00 00 00 3F 35 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0E 00 06 00 0E 00 00 00 BF 00 00 68 00 00 01 38 00 00 00 00 07 00 00 00 00 00 00 00 00 00 40 36 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0F 00 06 00 0F 00 00 00 BF 00 00 68 00 00 01 3A 00 00 00 00 07 00 00 00 00 00 00 00 00 00 41 37 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0F 00 07 00 0F 00 00 00 BE 00 00 67 00 00 01 39 00 00 00 00 07 00 00 00 00 00 00 00 00 00 41 37 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 ... Observations Lots of constant zeros and a few constant values that can be ignored. Some values are bytes and some values are words. Some values increased continuously while others were directly related to how fast I was peddling. These latter values were also zero when not peddling. Based on these observations I wrote code the break the data down into 9 different byte and word fields. I ran my console app again during a workout to collect these values into CSV and then threw it into Excel for analysis. Most of the values became pretty obvious by looking at them. The slowest part for me was figuring out the bike sends imperial measurements instead of metric. The 9 fields in order: The current second of workout. This value goes from 0 to 59 over and over. If you sample faster than every second this value will stay the same for multiple samples. The distance in hundredths of a mile. The workout time in seconds. This starts at zero and continues increasing for as long as I am peddling. When I stop peddling this value will stay the same. Speed in tenths of a mile per hour. Rotations per minute. Unknown (one byte). Seems related to workout speed but if not moving it increases by one every second and periodically resets to a value and then keeps counting. A speed value from 0 to 9. 2 other unknown byte values. Both appears to be an average value related to speed over the whole workout but exactly what it represents I don't know. With these observations, I decided I only needed 3 commands: The Connect command, the Start Workout command, and the Continue Workout command. I also didn't need to understand the commands; I just needed to send those bytes in that order. Step 4 - Putting It All Together The final step was re-arranging the work I had done into a consistent API and then create a WPF application for the user interface. This part wasn't too hard; this is the perfect type of application for MVVM. I also used Entity Framework Core to very quickly put together the SQLite storage for workout information. Final App Features: Displays workout time, current speed, current distance, and current RPM during the workout. At the end of the workout, the values switch to the averages of the workout. Automatically detects the Bluetooth activating on the bike (it's turned on by peddling). This starts the workout and pops up the window. Pauses the workout when peddling stops. The workout time will blink while paused. After one minute of being paused the workout ends automatically. Start and Stop buttons for manually controlling the workout. The daily distance is shown for goal setting. Clicking the X to close the app minimizes it to the system tray. Includes system tray icon with context menu. Window can be set to Always on Top (right click the window for context menu). Option to have the application automatically start on login. Saves the workout information and all the samples from the bike to a SQLite database. Conclusion The app works great and is everything that I hoped it could be. Now it's just a matter of seeing how far I can peddle. View this project on Github"
  }
}